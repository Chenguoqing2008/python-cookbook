Python类有一个名为__getattr__()的特殊方法，它仅当属性不能在实例的__dict__或它的类(类的__dict__)，或者祖先先(其__dict__)中找到时，才被调用。我们曾在实现授权中看到使用__getattr__()。

很多用户碰到的问题是，他们想要一个适当的函数来执行每一个属性访问，不光是属性不能找到情况。这就是__getattribute__()的用武之处了。它使用起来，类型__getattr__()，不同之处在于，当属性被访问时，它就一直都可以被调用，而不局限于不能找到的情况。

另外，当同时定义__getattribute__和__getattr__时，__getattr__方法不会再被调用，除非显示调用__getattr__方法或引发AttributeError异常。

描述符是Python新式类的关键点之一。它为对象属性提供强大的API。你可以认为描述符是表示对象属性的一个代理。当需要属性时，可根据你遇到的情况，通过描述符（如果有）或者采用常规方法（句点属性标识法）来访问它

整个描述符系统的心脏是__getattribute__()，因为对每个属性的实例都会调用到这个特殊的方法。这个方法被用来查找类的属性，同时也是你的一个代理，调用它可以进行属性的访问等操作。

如果一个实例调用了__get__()方法，这就可能传入一个类型或类的对象。举例来说，给定类X和实例x，x.foo由__getattribute__()转化成：
type(x).__dict__['foo'].__get__(x,type(x))

由于__getattribute__()的实现方法很特别，我们在此对__getattribute__()方法的执行方法做一个介绍。因此了解以下优先级别的排序就非常重要了：
类属性
数据描述符
实例属性
非数据描述符
默认为__getattr__()
