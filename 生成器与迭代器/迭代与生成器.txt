如今Python对延迟提供了更多的支持--它提供了工具在需要的时候才产生结果，而不是立即产生结果。特别地，有两种语言结构尽可能地延迟结果创建。

生成器函数：编写为常规的def语句，但是使用yield语句一次返回一个结果，在每个结果之间挂起和继续它们的状态。
生成器表达式类似于上一小节的列表解析，但是，它们返回按产生结果的一个对象，而不是内建的一个结果列表。

由于二者都不会一次性构建一个列表，它们节省了内存空间，并且允许计算时间分散到各个结果请求。

生成器函数：yield vs return

我们已经学习了编写接收输入参数并立即送回单个结果的常规函数。然而，也有可能编写可以送回一个值后从其退出的地方继续的函数。这样的函数叫生成器，因为它们随着时间产生值的一个序列。

一般来说，生成器函数和常规函数一样，并且，实际上也是用常规的def语句编写的。然而，当创建时，它们自动实际迭代协议，以便可以出现在迭代的背景中。

状态挂起
和返回一个值并退出的常规函数不同，生成器函数自动在生成值的时候挂起并继续函数的执行。因此，它们对于提前计算整个一系列值以及在类中手动保存和恢复状态都有用。由于生成器函数在挂起时保存的状态包含它们的整个本地作用域，当函数恢复时，它们的本地变量保持了信息并且使其可用。

生成器函数与常规函数之间的主要的代码不同之处在于，生成器yields一个值，而不是返回一个值，yield语句挂起该函数并向调用都发送回一个值，但是，保留足够的状态以便使得函数能够从它离开的地方继续。当继续时，函数在上一个yield返回后立即继续执行。从函数的角度来看，这允许其代码随着时间产生一系列的值，而不是一次计算它们并在诸如列表的内容中送回它们。